一、系统简介

Poem是一套程序设计系统，使用Python实现，基本数据类型和数据结构和Python完全一样，语法很像Scheme。其核心是一个解释器，用于解释运行用户编写的各种程序。为了编写程序，用户只需要一个能满足用户需求的文本（程序）编辑软件，比如开源软件：Notepad++、Sublime Text等等。


二、下载Windows下的可执行文件

运行Poem.exe进入单行交互模式，或者运行Poem.exe test.s解释执行某个文件。


三、文本编辑环境

Windows系统下，推荐使用Notepad++，在菜单栏语言选项里选择Lisp或者Schme，会将部分关键词彩色显示。

其次是Sublime Text3。ST虽然很好，但是对于中文支持总是需要你做一些额外的任务，这种任务是枯燥的，为什么不配置好，下载就能支持UTF-8呢。多次折腾之后，笔者厌倦了自己去下载插件支持UTF-8。于是，回头用上了Notepad++。


四、单行交互模式

运行python Poem.py，进入单行交互模式。

打印hello world:
(print "hello , world!")
print是Python内置函数，可以直接使用。

计算3+4:
(+ 3 4)或者3+4


五、系统关键词

关键词是编程系统的核心，一般不超过100个单词。Poem系统目前只有11个关键词，下面是关键词列表和简单的解释：

look	输出多项
define 	定义一个变量或函数
lambda 	定义一个无名函数
if 		条件分支，返回其中一项。
while 	循环
for 	循环
break 	跳出循环
class 	自定义类型
import 	导入一个Python模块
show 	查看当前环境
test 	测试某个函数
try 
raise
True False None

短词：

六、内置变量

内置变量可以通过(show g)指令查看:

E:\Project\Poem>python Poem.py
Poem> (show g)
Poem>(exit)

用户可在程序的任何位置调用(show)查看当前块的环境，该关键字用于调试程序，可能比手工打印更方便，毕竟(show)一次打印当前环境的所有变量值。

注意：打印出的变量值是一个Python列表：["abc" 1]，第一项是变量值，第二项表示变量是否使用，1意为已经使用过，0表示未使用。



数据类型：

一、基本数据类型(和Python保持一致)：int float bool string 

多数（标准）Scheme里，变量需要先define(定义)，然后set!(赋值)，其实，定义和赋值用一个关键字更好。我们使用define直接定义并赋值，而且一次能定义多个变量。之所以用define而不是set，是因为，set在python里用于创建一个集合。

(define (a 12) (b 13) (c "hello"))


二、复合数据结构(和Python保持一致)：


定义一个元组: 
(define a (tuple 12 34))

定义一个列表: 
(define a (list 12 34))，简写: (define a (' 12 34))

列表元素访问
(define (i (list 12 "hello" 34 True)))
简写：(define (i (' 12 "hello" 34 True)))

(| i 2)      -- 获得i的第二项 34
i|2         -- 意义同上。

列表元素访问操作符为|，不同于大多程序设计系统使用[]访问数组或者列表，我们使用操作符|访问列表元素。用户少敲一个字符，同时解释器的实现也少写一些代码。 

定义一个字典: 
(define (d (dict (' (' "+" +) 
    (' "-" -)
    (' "*" *)
    (' "/" /)
    )))
)

字典元素访问：

(: d "+")


模块访问：

(import sys)


look输出

Python的print一次可以输出多项：

(print a b c d e)

空行隔开：

(print a "\n"  b  "\n"  c  "\n" d "\n" e "\n")

在实际编程中，你也可以使用look一次性输出多项替代print：

(look b c d e)

look的好处是避免了多次添加换行字符“\n”.


提取公因式



三、符号中置表达式：

支持符号中置表达式：j|3.n+3*2-1。符号的运算从左到右。该表达式+在*左边，所以先算+，后算*，这和数学中定义的运算符优先级是不一致的 --- 3+4*2的结果为14。

注意:

一、表达式中不能有空格，否则会当成几个由空格隔开的表达式，这和其他多数程序设计系统是不一样的。

二、多数Scheme使用“-”作为变量分隔符，比如你可以定义一个变量is-a-list，而我们系统支持中缀表达式，“-”的意义是算术减，is-a-list的意义是三个变量相减。所以，你应当使用“_”来分割字符串作为变量名:is_a_list。



中置和前置的混合使用：j|3.n+(* 3 2)-1 (待完成)



顺序块 ((...) (...) (...))
将依次计算各项，返回最后一项的值；可以嵌套使用。注意：返回值不会在其所在的语句块里打印，而其余各项的值均被打印。

条件块 (if (1) (2) (3)) 
判断1的结果，如果为True，则计算2并返回，否则计算3并返回；23项必须有，可以为();可以嵌套使用。同样，返回值不打印。

while 	循环块
for		自增循环

break跳出循环


诗词模式：在这个模式里，我们并不讲究形式上括号的对称，而是尝试尽量让程序像诗词。最有名的诗词程序可能是一段名为“Love Letter”的Perl程序。

(poem

change a to b

listen me please


My name is Poemangxiaoping

I am 21 years old

I am a student.

One day,  i go to school,



A is int

B is str

C is int or str


Value of b is 

Value of a is 

look a b


C is function with x  y


return 10


Value of D is Call C with a b Please


)

函数定义define与lambda

(define ((mysum a b) (+ a b)))
(mysum 3 4)

函数内部可以定义函数，参见newton.s，函数A内定义的函数只能在函数A内使用，A外部的其他函数不能使用。


函数调用

函数调用时实参个数不一定要和形参个数一样。

几乎所有的程序设计系统中，函数的调用都是通过名为"栈"(stack)的数据结构，通常，栈空间是连续的。如果用C程序来实现一个栈，最简单的方式是定义一个字符数组：  char s[1024]；你可以用s这个字符数组存储函数参数、变量以及返回值。不过，在我们的程序设计系统中，函数调用形成的并不是栈结构，而是树结构。


class

程序设计者可以使用Python的type函数创建一个类，但是多数情况下，你应该使用class直接定义一个类，使用.操作符访问对象的成员。尽量避免使用type函数，因为type太低层。

(class point object (
    (define (n 12))
    (define (fun (lambda x (* 2 x))))
))


读写文件

读写文件直接使用Python的file对象，以下程序打开test.ss文件，并读取，打印：
(define (f (open "test.ss" "r")))
(print (f.read))


一、无用变量的检测警告功能：

new.s文件中定义了一个没有被使用的变量和函数，解释器能够检测到，并给出警告：
(define (abc 123))
(define (efg x) (x))

python Poem.py new.s

E:\Project\Poem>python Poem.py new.s
45150
0
0:00:00.012001
Warn : [ abc ] is not used.
Warn : [ efg ] is not used.


二、运行时间 (time (..))  

time --- 关键字，time后只能有一项参数，运行参数项，并打印运行时间。
例如：(time (+ 4 5)) --- 计算”4+5“，并打印运行时间。

(time ((...) (...) (...) (...)))

嵌套使用：
(time ((...) (time (...)) (...) (...)))


三、单元测试

编写代码测试你的函数，通常被称为“单元测试”。编写单元测试代码，可以避免枯燥重复的手工调试，是良好的编程习惯。

一个非常简单、运行次数很少、几乎不会出错的函数，不需要单元测试；函数越复杂， 输入和输出(参数和返回值)的逻辑关系越复杂，改动越频繁，越需要单元测试。

(test (sum 100 0) 5050)

test关键字运算第二个参数（预期是一个函数调用），如果其结果和第三个参数不符，则打印出错误信息。

我们定义一个函数：
(define (mytest x y) (if (!= (x) y)
    (print "Not Expect!")
))


编写代码测试你的函数，避免多次手工测试；而测试驱动开发则是测试先行，先写测试代码，然后编写实际的函数和类。


四、递归函数和尾递归（待实现）

如果一个函数定义内调用了自身，那么该函数是一个递归函数。一个函数是否是递归函数，在定义时已经确定了，而不用等到运行时。一个函数是否递归函数和该函数是否被真正调用无关。

一个递归函数，实际运行时，可能只调用了一次就结束了，并没有发生递归调用。比如上述sum函数，如果你调用(sum 0 0)，sum其实只被调用了一次就结束运行了，但是，Sum仍然是一个递归函数。

  (define (sum x r)
      (if (eq? x 0)
          (print r)
          (sum (- x 1) (+ x r))
       )
    )
   (sum 150 0)

上述函数是一个尾递归函数，对于那些支持尾递归优化的编译器或者解释器，其运行效率和循环相当。

sum在最后可能会调用sum自身。因为在函数的最后调用，函数的参数和局部变量的生命周期即将结束，所以此时不需要为新的调用增长栈内存，而是可以直接使用上层的栈空间。这种技术称为尾递归优化。

虽然Python不支持尾递归优化，但是我们可以写一个装饰器函数进行尾递归优化。


五、并行单元（待实现）

每个并行单元是一段在一个CPU核心上运行的代码。一个并行单元内的代码是不可能被分配到两个不同的CPU核心上执行的;而不同的并行单元，可能会在同一个CPU核心上执行 -- 线程切换，或者一个并行单元完成后，执行另一个并行单元；在多核CPU计算机上，通常会放在不同的CPU上执行，互不影响。

常规计算和的代码：

    (define (sum x r)
      (if (eq? x 0)
          (print r)
          (sum (- x 1) (+ x r))
       )
    )
    (sum 1000 0)

并行后的代码：

(define (sum x y z )
    (if (eq? x y)
        z
        (sum (- x 1) y (+ x r))
     )
)


(thread  s1
    (begin
        (define (s1 0))
        (define (s1 (sum 1000 500 0)))
    )
)

(thread  s2
    (begin
        (define (s2 0))
        (define (s2 (sum 500 0 0)))
    )
)

#这里要等上面两个thread的s1 s2的计算完成后才可计算。
(define (s3 (+ s1 s2)))
(print s3)

每个therad在一个独立的CPU核心上执行，现代CPU通常有多个核心（2个、4个、8个、16个....）


六、中文编程

Poem支持使用中文作为过程名（函数名）。对于中文编程，已经有人作出一些尝试，如易语言中文编程、文言文编程。

电子计算机诞生于美国，最先支持的是英文字母，中文等其他国家的文字的支持比较流行的方案是UTF8，早期还有GBK中文编码等方案。

现有的各种程序库通常都是英文的，几乎没有中文程序库。我们应当尝试使用中文命名类名、变量名、函数名，这样，也许，你可以少写点注释、文档。

下面是一个简单的例子：
(define (相加 x y) (+ x y))
(相加 3 4)
以上程序，得到结果7。

某些变量，比如循环自增用的i，这些有着固定套路的变量，用中文命名反而麻烦，没有必要。



附录：  和Lisp/Scheme的一些区别（不完全）：


Poem系统虽然很像Lisp、Scheme，但是不符合任何一个Lisp，Scheme标准，作者无意实现一个符合某个标准的Scheme或者Lisp，其目的是以Scheme语法形式使用各种Python库。
